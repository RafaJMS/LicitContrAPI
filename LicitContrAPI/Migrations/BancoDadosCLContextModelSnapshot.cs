// <auto-generated />
using System;
using LicitContrAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LicitContrAPI.Migrations
{
    [DbContext(typeof(BancoDadosCLContext))]
    partial class BancoDadosCLContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LicitContrAPI.Models.Contrato", b =>
                {
                    b.Property<int>("IdContrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_contrato");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdContrato"), 1L, 1);

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("date")
                        .HasColumnName("data_inicio");

                    b.Property<DateTime?>("DataTermino")
                        .HasColumnType("date")
                        .HasColumnName("data_termino");

                    b.Property<int?>("IdEntidade")
                        .HasColumnType("int")
                        .HasColumnName("id_entidade");

                    b.Property<int?>("IdFornecedor")
                        .HasColumnType("int")
                        .HasColumnName("id_fornecedor");

                    b.Property<int?>("IdObjeto")
                        .HasColumnType("int")
                        .HasColumnName("id_objeto");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('Ativo')");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(20,5)")
                        .HasColumnName("valor");

                    b.HasKey("IdContrato")
                        .HasName("PK__Contrato__FF5F2A56548126C6");

                    b.HasIndex("IdEntidade");

                    b.HasIndex("IdFornecedor");

                    b.HasIndex("IdObjeto");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Entidade", b =>
                {
                    b.Property<int>("IdEntidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_entidade");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEntidade"), 1L, 1);

                    b.Property<string>("Contato")
                        .HasColumnType("text")
                        .HasColumnName("contato");

                    b.Property<string>("Endereco")
                        .HasColumnType("text")
                        .HasColumnName("endereco");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Tipo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tipo")
                        .HasDefaultValueSql("('Pública')");

                    b.HasKey("IdEntidade")
                        .HasName("PK__Entidade__E3B5790B4CF95811");

                    b.ToTable("Entidades");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Fornecedor", b =>
                {
                    b.Property<int>("IdFornecedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_fornecedor");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFornecedor"), 1L, 1);

                    b.Property<string>("Contato")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contato");

                    b.Property<string>("DocIdentificacao")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("doc_identificacao");

                    b.Property<string>("Endereco")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("endereco");

                    b.Property<int?>("IdEntidade")
                        .HasColumnType("int")
                        .HasColumnName("id_entidade");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Tipo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tipo")
                        .HasDefaultValueSql("('Jurídica')");

                    b.HasKey("IdFornecedor")
                        .HasName("PK__Forneced__6C477092251EB8F5");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Licitacao", b =>
                {
                    b.Property<int>("IdLicitacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_licitacao");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLicitacao"), 1L, 1);

                    b.Property<DateTime?>("DataPublicacao")
                        .HasColumnType("date")
                        .HasColumnName("data_publicacao");

                    b.Property<int?>("IdEntidade")
                        .HasColumnType("int")
                        .HasColumnName("id_entidade");

                    b.Property<string>("Modalidade")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("modalidade");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('Ativo')");

                    b.Property<decimal?>("ValorEstimado")
                        .HasColumnType("decimal(20,5)")
                        .HasColumnName("valor_estimado");

                    b.HasKey("IdLicitacao")
                        .HasName("PK__Licitaco__A9BF10D045BF8FE5");

                    b.HasIndex("IdEntidade");

                    b.ToTable("Licitacoes");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Lote", b =>
                {
                    b.Property<int>("IdLote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_lote");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLote"), 1L, 1);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<int?>("IdLicitacao")
                        .HasColumnType("int")
                        .HasColumnName("id_licitacao");

                    b.Property<decimal?>("ValorEstimadoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdLote")
                        .HasName("PK__Lotes__9A000486A2208E12");

                    b.HasIndex("IdLicitacao");

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Objeto", b =>
                {
                    b.Property<int>("IdObjeto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_objeto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdObjeto"), 1L, 1);

                    b.Property<string>("Categoria")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("categoria");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<int?>("IdFornecedor")
                        .HasColumnType("int")
                        .HasColumnName("id_fornecedor");

                    b.Property<int?>("IdLote")
                        .HasColumnType("int")
                        .HasColumnName("id_lote");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text")
                        .HasColumnName("observacoes");

                    b.Property<int?>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<decimal?>("ValorEstimado")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("valorEstimado");

                    b.HasKey("IdObjeto")
                        .HasName("PK__Objetos__6C522AB4C0F18AEE");

                    b.HasIndex("IdFornecedor");

                    b.HasIndex("IdLote");

                    b.ToTable("Objetos");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<int?>("IdEntidade")
                        .HasColumnType("int")
                        .HasColumnName("id_entidade");

                    b.Property<string>("NivelPermissao")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nivel_permissao")
                        .HasDefaultValueSql("('Baixo')");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("senha");

                    b.HasKey("IdUsuario")
                        .HasName("PK__Usuarios__4E3E04ADBFF3678E");

                    b.HasIndex("IdEntidade");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LicitContrAPI.Models.Contrato", b =>
                {
                    b.HasOne("LicitContrAPI.Models.Entidade", "IdEntidadeNavigation")
                        .WithMany("Contratos")
                        .HasForeignKey("IdEntidade")
                        .HasConstraintName("FK_Contratos_Entidades");

                    b.HasOne("LicitContrAPI.Models.Fornecedor", "IdFornecedorNavigation")
                        .WithMany("Contratos")
                        .HasForeignKey("IdFornecedor")
                        .HasConstraintName("FK_Contratos_Fornecedores");

                    b.HasOne("LicitContrAPI.Models.Objeto", "IdObjetoNavigation")
                        .WithMany("Contratos")
                        .HasForeignKey("IdObjeto")
                        .HasConstraintName("FK_Contratos_Objetos");

                    b.Navigation("IdEntidadeNavigation");

                    b.Navigation("IdFornecedorNavigation");

                    b.Navigation("IdObjetoNavigation");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Licitacao", b =>
                {
                    b.HasOne("LicitContrAPI.Models.Entidade", "IdEntidadeNavigation")
                        .WithMany("Licitacos")
                        .HasForeignKey("IdEntidade")
                        .HasConstraintName("FK_Licitacoes_Entidades");

                    b.Navigation("IdEntidadeNavigation");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Lote", b =>
                {
                    b.HasOne("LicitContrAPI.Models.Licitacao", "IdLicitacaoNavigation")
                        .WithMany("Lotes")
                        .HasForeignKey("IdLicitacao")
                        .HasConstraintName("FK_Lotes_Licitacoes");

                    b.Navigation("IdLicitacaoNavigation");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Objeto", b =>
                {
                    b.HasOne("LicitContrAPI.Models.Fornecedor", "IdFornecedorNavigation")
                        .WithMany("Objetos")
                        .HasForeignKey("IdFornecedor")
                        .HasConstraintName("FK_Objetos_Fornecedores");

                    b.HasOne("LicitContrAPI.Models.Lote", "IdLoteNavigation")
                        .WithMany("Objetos")
                        .HasForeignKey("IdLote")
                        .HasConstraintName("FK_Objetos_Lotes");

                    b.Navigation("IdFornecedorNavigation");

                    b.Navigation("IdLoteNavigation");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Usuario", b =>
                {
                    b.HasOne("LicitContrAPI.Models.Entidade", "IdEntidadeNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdEntidade")
                        .HasConstraintName("FK_Usuarios_Entidades");

                    b.Navigation("IdEntidadeNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LicitContrAPI.Models.Entidade", b =>
                {
                    b.Navigation("Contratos");

                    b.Navigation("Licitacos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Fornecedor", b =>
                {
                    b.Navigation("Contratos");

                    b.Navigation("Objetos");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Licitacao", b =>
                {
                    b.Navigation("Lotes");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Lote", b =>
                {
                    b.Navigation("Objetos");
                });

            modelBuilder.Entity("LicitContrAPI.Models.Objeto", b =>
                {
                    b.Navigation("Contratos");
                });
#pragma warning restore 612, 618
        }
    }
}
